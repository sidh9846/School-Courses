package cp213;

import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.print.PageFormat;
import java.awt.print.Printable;
import java.awt.print.PrinterException;
import java.math.BigDecimal;
import java.text.DecimalFormat;
import java.util.HashMap;
import java.util.Map;

/**
 * Stores a HashMap of MenuItem objects and the quantity of each MenuItem
 * ordered. Each MenuItem may appear only once in the HashMap.
 *
 * @author your name here
 * @author Abdul-Rahman Mawlood-Yunis
 * @author David Brown
 * @version 2023-09-06
 */
public class Order implements Printable {

	/**
	 * The current tax rate on menu items.
	 */
	public static final BigDecimal TAX_RATE = new BigDecimal(0.13);
	DecimalFormat df = new DecimalFormat("#.00");

	// Attributes

	// your code here

	private final Map<MenuItem, Integer> orderItems = new HashMap<>();

	/**
	 * Increments the quantity of a particular MenuItem in an Order with a new
	 * quantity. If the MenuItem is not in the order, it is added.
	 *
	 * @param item     The MenuItem to purchase - the HashMap key.
	 * @param quantity The number of the MenuItem to purchase - the HashMap value.
	 */
	public void add(final MenuItem item, final int quantity) {

		// your code here
		if (quantity > 0) {
			orderItems.put(item, orderItems.getOrDefault(item, 0) + quantity);
		}

	}

	/**
	 * Calculates the total value of all MenuItems and their quantities in the
	 * HashMap.
	 *
	 * @return the total price for the MenuItems ordered.
	 */
	public BigDecimal getSubTotal() {

		// your code here

		BigDecimal subTotal = BigDecimal.ZERO;
		for (Map.Entry<MenuItem, Integer> entry : orderItems.entrySet()) {
			MenuItem item = entry.getKey();
			int quantity = entry.getValue();
			subTotal = subTotal.add(item.getPrice().multiply(BigDecimal.valueOf(quantity)));
		}
		return new BigDecimal(df.format((subTotal)));
	}

	/**
	 * Calculates and returns the total taxes to apply to the subtotal of all
	 * MenuItems in the order. Tax rate is TAX_RATE.
	 *
	 * @return total taxes on all MenuItems
	 */
	public BigDecimal getTaxes() {

		// your code here

		BigDecimal value = getSubTotal().multiply(TAX_RATE);

		return new BigDecimal(df.format((value)));
	}

	/**
	 * Calculates and returns the total price of all MenuItems order, including tax.
	 *
	 * @return total price
	 */
	public BigDecimal getTotal() {

		// your code here

		BigDecimal value = getSubTotal().add(getTaxes());

		return new BigDecimal(df.format((value)));
	}

	/*
	 * Implements the Printable interface print method. Prints lines to a Graphics2D
	 * object using the drawString method. Prints the current contents of the Order.
	 */
	@Override
	public int print(final Graphics graphics, final PageFormat pageFormat, final int pageIndex)
			throws PrinterException {
		int result = PAGE_EXISTS;

		if (pageIndex == 0) {
			final Graphics2D g2d = (Graphics2D) graphics;
			g2d.setFont(new Font("MONOSPACED", Font.PLAIN, 12));
			g2d.translate(pageFormat.getImageableX(), pageFormat.getImageableY());
			// Now we perform our rendering
			final String[] lines = this.toString().split("\n");
			int y = 100;
			final int inc = 12;

			for (final String line : lines) {
				g2d.drawString(line, 100, y);
				y += inc;
			}
		} else {
			result = NO_SUCH_PAGE;
		}
		return result;
	}

	/**
	 * Returns a String version of a receipt for all the MenuItems in the order.
	 */
	@Override
	public String toString() {

		// your code here

//		StringBuilder receipt = new StringBuilder();
//        for (Map.Entry<MenuItem, Integer> entry : orderItems.entrySet()) {
//            MenuItem item = entry.getKey();
//            int quantity = entry.getValue();
//            receipt.append(item.getName()).append("\t").append(item.getPrice())
//                    .append("\t").append(quantity).append("\n");
//        }
//        receipt.append("\nSubtotal: ").append(getSubTotal()).append("\n");
//        receipt.append("Tax: ").append(getTaxes()).append("\n");
//        receipt.append("Total: ").append(getTotal()).append("\n");
//        return receipt.toString();

		StringBuilder receipt = new StringBuilder("Receipt\n");

		for (Map.Entry<MenuItem, Integer> entry : orderItems.entrySet()) {
			MenuItem item = entry.getKey();
			BigDecimal quantity = BigDecimal.valueOf(entry.getValue());
			double itemTotal = item.getPrice().multiply(BigDecimal.valueOf(quantity));

			receipt.append(String.format("%-20s %d @ $ %.2f = $ %.2f%n", item.getName(), quantity, item.getPrice(),
					itemTotal));
		}

		receipt.append(String.format("%nSubtotal: %25s $ %.2f%n", "", getSubTotal()));
		receipt.append(String.format("Taxes: %28s $ %.2f%n", "", getTaxes()));
		receipt.append(String.format("Total: %28s $ %.2f%n", "", getTotal()));

		return receipt.toString();

	}

	/**
	 * Replaces the quantity of a particular MenuItem in an Order with a new
	 * quantity. If the MenuItem is not in the order, it is added. If quantity is 0
	 * or negative, the MenuItem is removed from the Order.
	 *
	 * @param item     The MenuItem to update
	 * @param quantity The quantity to apply to item
	 */
	public void update(final MenuItem item, final int quantity) {

		// your code here

		if (quantity <= 0) {
			orderItems.remove(item);
		} else {
			orderItems.put(item, quantity);
		}

	}
}